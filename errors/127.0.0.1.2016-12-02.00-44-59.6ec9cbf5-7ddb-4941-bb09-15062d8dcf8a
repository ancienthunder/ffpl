(dp1
S'output'
p2
S"<type 'exceptions.NameError'> global name 'gameweeks' is not defined"
p3
sS'layer'
p4
S'/home/ancienthunder/Downloads/web2py/applications/ffpl/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nimport mutex, json, os\nglobal_mutex = mutex.mutex()\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    if \'profile\' not in auth.settings.actions_disabled:\n        auth.settings.actions_disabled.append(\'profile\')\n    if \'register\' not in auth.settings.actions_disabled:\n        auth.settings.actions_disabled.append(\'register\')\n    user_id = auth.user.email.split(\'@\')[0]\n    welcome_msg = "Welcome to the FFPL website Team %s!" % user_id\n    response.flash = T(welcome_msg)\n    import json, os\n    with open(os.path.join(request.folder, \'static\', \'teams.json\')) as df:\n        team = json.load(df)\n    with open(os.path.join(request.folder, \'static\', \'mapping.json\')) as df:\n        members = json.load(df)\n    captains =[]\n    for i in team[user_id]:\n        captains.append(members[i])\n    # TODO: Set gameweek from config\n    import datetime, os, json\n    from dateutil import tz\n    import datetime\n    with open(os.path.join(request.folder, \'private\', \'deadlines.json\')) as df:\n        deadlines = json.load(df)\n    dt = deadlines[\'GW11\']\n    deadline_time = datetime.datetime(int(dt[0]), int(dt[1]), int(dt[2]), int(dt[3]), int(dt[4]), int(dt[5]), int(dt[6]), tzinfo=tz.gettz(\'Asia/Calcutta\'))\n    \n    form_msg = \'Choose your captain for gameweek 10:\'\n    form = FORM(form_msg)\n    form.append(BR())\n    for i in captains:\n        form.append(INPUT(_name=\'Captains\', _type= \'radio\',value=str(i), _value=str(i)))\n        form.append(str(i))\n        form.append(BR())\n    form.append(INPUT(_type=\'submit\'))\n    form.append(BR())\n    if form.accepts(request,session, keepvalues=True, onvalidation=validate_with_time):\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = form.errors\n    return dict(message=T(\'Welcome to FFPL!\'), form=form, deadline=str(deadline_time))\n\n\ndef validate_with_time(form):\n    import datetime, os, json\n    from dateutil import tz\n    with open(os.path.join(request.folder, \'private\', \'deadlines.json\')) as df:\n        deadlines = json.load(df)\n    dt = deadlines[\'GW11\'] #TODO: Update latest Gameweek\n    deadline_time = datetime.datetime(int(dt[0]), int(dt[1]), int(dt[2]), int(dt[3]), int(dt[4]), int(dt[5]), int(dt[6]), tzinfo=tz.gettz(\'Asia/Calcutta\'))\n    current_time = datetime.datetime.now(tz=tz.gettz(\'Asia/Calcutta\'))\n    if deadline_time < current_time:\n        form.errors = \'You are too late. Fine shall be imposed.\'\n    else:\n        with open(os.path.join(request.folder, \'static\', \'reverse_mapping.json\')) as df:\n            members = json.load(df)\n        with open(os.path.join(request.folder, \'private\', \'captains_gameweek.json\')) as df:\n            captains = json.load(df)\n        if \'GW11\' in captains:\n            captains[\'GW11\'][auth.user.email.split(\'@\')[0]] = members[str(form.vars.Captains)]\n            global global_mutex\n            global_mutex.lock(set_captain, json.dumps(captains))\n        else:\n            raise HTTP(404, \'Why the f*** are you trying to set a captain before we announced it? :P\')\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    if \'profile\' not in auth.settings.actions_disabled:\n        auth.settings.actions_disabled.append(\'profile\')\n    if \'register\' not in auth.settings.actions_disabled:\n        auth.settings.actions_disabled.append(\'register\')\n    return dict(form=auth())\n\ndef set_captain(captains):\n    import os\n    fd = open(os.path.join(request.folder, \'private\', \'captains_gameweek.json\'), \'w+\')\n    fd.write(captains)\n    global global_mutex\n    global_mutex.unlock()\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n@auth.requires_login()\ndef results():\n    msg = \'Results for this gameweek!\'\n    current_gameweek = \'GW12\' #get_current_gameweek()\n    with open(os.path.join(request.folder, \'private\', \'gameweek_results.json\'), \'r\') as df:\n        gw_res = json.load(df)\n    table = TABLE(*[TR(*rows) for rows in gw_res[current_gameweek]])\n    tables = []\n    cur_gameweek = gw_res[current_gameweek]\n    list_of_gameweeks = []\n    for k, v in gw_res.iteritems():\n        list_of_gameweeks.append(int(k[2:]))\n    list_of_gameweeks.sort()\n    for i in range(len(list_of_gameweeks)):\n        list_of_gameweeks[i] = \'GW\'+str(list_of_gameweeks[i])\n    return dict(message=\'Results for this gameweek!\', raw_res=list_of_gameweeks)\n\n@auth.requires_login()\ndef gwres():\n    with open(os.path.join(request.folder, \'private\', \'gameweek_results.json\'), \'r\') as df:\n        gw_res = json.load(df)\n    req_gw = request.vars[\'gw\']\n    if req_gw not in gw_res:\n        raise HTTP(400)\n    return dict(raw_res=gameweeks[req_gw])\n\ndef get_current_gameweek():\n    with open(os.path.join(request.folder, \'private\', \'gameweek.json\'), \'r\') as df:\n        gameweeks = json.load(df)\n    return str(gameweeks[-1])\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(gwres)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ancienthunder/Downloads/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ancienthunder/Downloads/web2py/applications/ffpl/controllers/default.py", line 162, in <module>\n  File "/home/ancienthunder/Downloads/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ancienthunder/Downloads/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/ancienthunder/Downloads/web2py/applications/ffpl/controllers/default.py", line 145, in gwres\n    return dict(raw_res=gameweeks[req_gw])\nNameError: global name \'gameweeks\' is not defined\n'
p11
s.